package androidbinary

// package main

import (
	// "bytes"
	// "encoding/json"
	"encoding/xml"
	"fmt"
	// "github.com/lunny/axmlParser"
	// "github.com/xuchengzhi/Library/FileZip"
	// "image/jpeg"
	"image"
	"io/ioutil"
	"os"
	// "os/exec"
	// "path"
	"log"
	// "path/filepath"
	// "reflect"
	"github.com/shogo82148/androidbinary/apk"
	"github.com/xuchengzhi/Library/AppInfo/IPA"
	"strings"
)

type AppInfo struct {
	Name        string
	Version     string
	Appsname    string
	packageName string
}

func ZipRename(file string) string {
	name := strings.Split(file, ".")[0]
	os.Rename(file, name+".zip")
	return name + ".zip"
}

func PathExists(path string) (bool, error) {
	_, err := os.Stat(path)
	if err == nil {
		return true, nil
	}
	if os.IsNotExist(err) {
		return false, nil
	}
	return false, err
}

type Result struct {
	XMLName    xml.Name `xml:"plist"` //标签上的标签名
	StringList []string `xml:"dict>string"`
	KeyList    []string `xml:"dict>key"`
}

func FileFormat() (AppInfo, bool) {
	var info AppInfo
	files := "./Payload/SJZZ.app/Info.plist"
	stats, err := PathExists(files)
	if err != nil {
		fmt.Println(err)
		return info, false
	}

	var name, builds, Appname string

	if stats {
		var result Result
		content, _ := ioutil.ReadFile(files)
		xml.Unmarshal(content, &result)

		strs := result.StringList
		keys := result.KeyList

		fmt.Println(len(strs), len(keys))
		// name = strs[7]
		// buildnum = strs[19]
		// builds = strs[11]
		// Appname = strs[23]

		// fmt.Println(name, Appname, buildnum, builds)
		for i := 0; i < len(strs); i++ {
			fmt.Println(keys[i], strs[i])
			if keys[i] == "CFBundleName" {
				fmt.Println(strs[i])
			}
		}
		info.Name = Appname
		info.Appsname = name
		info.Version = builds
		// os.RemoveAll("./Payload")
		return info, true
	} else {
		os.RemoveAll("./Payload")
		return info, false
	}

}

func Adr(app string) (bool, AppJson) {
	var info AppJson
	stats, err := PathExists(app)
	if err != nil {
		log.Println("apk文件不存在")
		return false, info
	}
	if stats {
		// listener := new(axmlParser.AppNameListener)
		// axmlParser.ParseApk(app, listener)
		// log.Println(listener)
		// info.Name = listener.PackageName
		// info.Version = listener.VersionName
		// info.VCode = listener.VersionCode
		pkg, _ := apk.OpenFile(app)
		defer pkg.Close()

		info.Icon, _ = pkg.Icon(nil)         // returns the icon of APK as image.Image
		info.PackageName = pkg.PackageName() // returns the pakcage name
		info.Version = pkg.VersionName()
		info.Name = pkg.ApkName()
		info.VCode = pkg.VersionCode()
		// mainActivity, _ = pkg.MainAcitivty()
		// file, err := os.Create("test.jpg")
		// if err != nil {
		// 	log.Fatal(err)
		// }
		// defer file.Close()
		// jpeg.Encode(file, icon, nil)
		log.Println("APK:", info)
		return true, info
	} else {
		log.Println("apk文件不存在")
		return false, info
	}

}

type AppJson struct {
	Name        string
	Version     string
	VCode       string
	PackageName string
	Icon        image.Image
}

// func IOS(app string) (bool, AppJson) {
// 	abspath, _ := filepath.Abs(filepath.Dir("CheckApp.jar"))
// 	var apps AppJson
// 	Apath := fmt.Sprintf("%v/CheckApp.jar", abspath)
// 	stats, errs := PathExists(app)
// 	jars, _ := PathExists("./CheckApp.jar")
// 	apk, _ := PathExists(app)
// 	if apk == false {
// 		log.Printf("ipa包%v不存在", app)
// 		return false, apps
// 	}
// 	if jars == false {
// 		log.Printf("jar包%v不存在", Apath)
// 		return false, apps
// 	}
// 	if errs != nil {
// 		log.Println(errs)
// 		return false, apps
// 	}

// 	cmd := exec.Command("java", "-jar", Apath, app)
// 	out, err := cmd.Output()
// 	if err != nil {
// 		log.Println(err)
// 		return false, apps
// 	}
// 	log.Println(string(out))
// 	if stats {
// 		str := strings.Replace(string(out), ",", ",", -1)
// 		str = strings.Replace(str, " ", "", -1)
// 		str = strings.Replace(str, "=", ":", -1)
// 		str = strings.Replace(str, "{", "", -1)
// 		str = strings.Replace(str, "}", "", -1)
// 		str = strings.Replace(str, "\r", "", -1)
// 		str = strings.Replace(str, "\n", "", -1)
// 		t := strings.Split(str, ",")

// 		for i := 0; i < len(t); i++ {
// 			s := strings.Split(t[i], ":")
// 			if s[0] == "package" {
// 				apps.Name = s[1]
// 			} else if s[0] == "versionName" {
// 				apps.Version = s[1]

// 			} else if s[0] == "versionCode" {
// 				apps.VCode = s[1]

// 			} else if s[0] == "packageName" {
// 				apps.packageName = s[1]
// 			}

// 		}
// 		return true, apps
// 	} else {
// 		return false, apps
// 	}
// }

func IOS(app string) (bool, AppJson) {
	var apps AppJson
	is_exists, _ := PathExists(app)
	if is_exists == false {
		log.Printf("ipa包%v不存在", app)
		return false, apps
	}
	res, err := ipa.OpenFile(app)
	if err != nil {
		return false, apps
	}
	appinfo, errs := res.IpaInfo()
	if errs != nil {
		return false, apps
	}
	apps.Name = appinfo.Name
	apps.Version = appinfo.Version
	apps.PackageName = appinfo.PackgeName
	apps.Icon = appinfo.Ico
	return true, apps
}

// func main() {

// 	status, appinfo := IOS("ceshi.ipa")
// 	if status {
// 		fmt.Println(appinfo)
// 	}
// 	// fmt.Println(Adr("./ceshi.apk"))

// 	// IOS("./SJZZ.ipa")
// }
