package main

// package HtmlToIni

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/tidwall/gjson"
	"github.com/xuchengzhi/Library/Time"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
	// "reflect"
)

type AutoGenerated [][]struct {
	ObjectID string `json:"objectID"`
	Type     string `json:"type"`
	Name     string `json:"name"`
	Rect     struct {
		X      int `json:"x"`
		Y      int `json:"y"`
		Width  int `json:"width"`
		Height int `json:"height"`
	} `json:"rect"`
	Rotation  int           `json:"rotation"`
	Radius    int           `json:"radius"`
	Borders   []interface{} `json:"borders"`
	Fills     []interface{} `json:"fills"`
	Shadows   []interface{} `json:"shadows"`
	Opacity   int           `json:"opacity"`
	StyleName string        `json:"styleName"`
	Content   string        `json:"content"`
	Color     struct {
		R        int    `json:"r"`
		G        int    `json:"g"`
		B        int    `json:"b"`
		A        int    `json:"a"`
		ColorHex string `json:"color-hex"`
		ArgbHex  string `json:"argb-hex"`
		CSSRgba  string `json:"css-rgba"`
		UIColor  string `json:"ui-color"`
	} `json:"color"`
	FontSize      int      `json:"fontSize"`
	FontFace      string   `json:"fontFace"`
	TextAlign     string   `json:"textAlign"`
	LetterSpacing int      `json:"letterSpacing"`
	LineHeight    int      `json:"lineHeight"`
	CSS           []string `json:"css"`
}

type CharsJson struct {
	Y         int    `json:"y"`
	X         int    `json:"x"`
	Rotation  int    `json:"rotation"`
	Character string `json:"character"`
	Size      int    `json:"size"`
}

type PageJson struct {
	Chars []CharsJson `json:"chars"`
}

type ResJson struct {
	Padding int        `json:"padding"`
	Pages   []PageJson `json:"pages"`
}

func Home(c *gin.Context) {
	c.HTML(200, "index.html", nil)
}

func Run(Html string) (string, error) {
	f, err := ioutil.ReadFile(Html)
	// log.Println(reflect.TypeOf(f))
	if err != nil {
		log.Println(err.Error())
	}

	tmp := string(f)
	start_num := strings.Index(tmp, "SMApp(")
	end_num := strings.Index(tmp, "}) });")

	tmps := tmp[start_num+6 : end_num+1]

	sss := fmt.Sprintf("%v", gjson.Get(tmps, "artboards.#.layers"))
	// s1 := strings.Replace(sss, "[[{", "{", -1)
	// s2 := strings.Replace(s1, "}]]", "}", -1)
	var Tms AutoGenerated
	json.Unmarshal([]byte(sss), &Tms)

	msg := Tms[0]
	count := len(msg)
	var char_list = []CharsJson{}
	for i := 0; i < count; i++ {
		var chars_ CharsJson
		chars_.X = msg[i].Rect.X * 2
		chars_.Y = msg[i].Rect.Y * 2
		chars_.Size = msg[i].Rect.Width * 2
		chars_.Rotation = msg[i].Rotation
		chars_.Character = msg[i].Name
		char_list = append(char_list, chars_)
	}

	var pa PageJson

	// b, _ := json.Marshal(char_list)
	pa.Chars = char_list

	var res ResJson
	res.Pages = append(res.Pages, pa)
	b1, _ := json.Marshal(res)
	// log.Println(string(b1))
	ini_file, err := WriteFile(string(b1))
	return ini_file, err
}

func Fileupload(c *gin.Context) {

	//得到上传的文件
	file, header, err := c.Request.FormFile("index") //image这个是uplaodify参数定义中的   'fileObjName':'image'
	if err != nil {
		c.String(http.StatusBadRequest, "Bad request")
		return
	}
	//文件的名称
	filename := header.Filename

	if checkFileIsExist("tmp/" + filename) {
		errs := os.Remove("tmp/" + filename)

		if errs != nil {
			log.Println("临时文件删除失败", errs)

		} else {
			// 删除成功
			log.Println("临时已文件删除")
		}
	}
	//创建文件
	out, err := os.Create("tmp/" + filename)
	//注意此处的 static/uploadfile/ 不是/static/uploadfile/
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()
	_, err = io.Copy(out, file)
	if err != nil {
		log.Fatal(err)
	}
	ini_file, err := Run("tmp/" + filename)

	if err != nil {
		c.String(http.StatusBadRequest, fmt.Sprintf("ini生成失败：%v", err))
	}

	c.String(http.StatusCreated, ini_file)

}

func WriteFile(msg string) (string, error) {
	var d1 = []byte(msg)
	filename := fmt.Sprintf("static/ini/%v.ini", GetTime.TS())
	f, err := os.Create(filename) //创建文件
	if err != nil {
		return "null", err
	}
	defer f.Close()
	f.Write(d1)
	return filename, nil
}

func checkFileIsExist(filename string) bool {
	var exist = true
	if _, err := os.Stat(filename); os.IsNotExist(err) {
		exist = false
	}
	return exist
}

func Start() {
	gin.SetMode(gin.ReleaseMode)
	r := gin.Default()
	r.LoadHTMLGlob("./views/*")
	r.GET("/", Home)
	r.POST("/fileup", Fileupload)

	r.Static("/static", "static")
	// router.StaticFS("/more_static", http.Dir("assets"))

	//定义默认路由
	r.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusNotFound, gin.H{
			"status": 404,
			"error":  "404, page not exists!",
		})
	})
	r.Run(":80")
	fmt.Println("Gin service start success")
}

func main() {
	// Run("file/index_bad.html")
	Start()

}
